{"ast":null,"code":"var _jsxFileName = \"/home/wappnet-17/workspace/navigation_treetask/navigation_tree/src/TreeView.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // interface ITreeViewProps {\n//     name: string,\n//     data: []\n// }\n// const TreeView = ({ name, data }: ITreeViewProps): JSX.Element => {\n//     const [isToggle, setIsToggled] = useState<boolean>(false);\n//     const toggleReport = () => {\n//         setIsToggled(!isToggle)\n//     }\n//     return (\n//         <>\n//             <div className=\"App\">\n//                 <ul className=\"tree\">\n//                     <li className=\"tree_li\">\n//                         <input type=\"checkbox\" checked id=\"c1\" />\n//                         <label className=\"tree_label label_dropdwn\" htmlFor=\"c1\"><span>Level 0</span></label>\n//                     </li>\n//                 </ul>\n//             </div>\n//             {/* {isToggle && } */}\n//         </>\n//     )\n// }\n// export default TreeView;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TreeView = ({\n  data,\n  toggled = true,\n  name = null,\n  isLast = true,\n  isChildElement = false,\n  isParentToggled = true\n}) => {\n  _s();\n\n  const [isToggled, setIsToggled] = React.useState(toggled);\n  const isDataArray = Array.isArray(data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `tree-element ${isParentToggled && 'collapsed'} ${isChildElement && 'is-child'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: isToggled ? 'toggler' : 'toggler closed',\n      onClick: () => setIsToggled(!isToggled)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), name ? /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: [\"\\xA0\\xA0\", name, \": \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"\\xA0\\xA0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 55\n    }, this), isDataArray ? '[' : '{', !isToggled && '...', Object.keys(data).map((v, i, a) => typeof data[v] === 'object' ? /*#__PURE__*/_jsxDEV(TreeView, {\n      data: data[v],\n      isLast: i === a.length - 1,\n      name: isDataArray ? null : v,\n      isChildElement: true,\n      isParentToggled: isParentToggled && isToggled\n    }, `${name}-${v}-${i}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: isToggled ? 'tree-element' : 'tree-element collapsed',\n      children: [isDataArray ? '' : /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [v, \": \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 33\n      }, this), data[v], i === a.length - 1 ? '' : ',']\n    }, `${name}-${v}-${i}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }, this)), isDataArray ? ']' : '}', !isLast ? ',' : '']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TreeView, \"KBhQNezkcbsu+Llg8l3Apf7iKKY=\");\n\n_c = TreeView;\nexport default TreeView;\n\nvar _c;\n\n$RefreshReg$(_c, \"TreeView\");","map":{"version":3,"sources":["/home/wappnet-17/workspace/navigation_treetask/navigation_tree/src/TreeView.jsx"],"names":["React","useState","useEffect","TreeView","data","toggled","name","isLast","isChildElement","isParentToggled","isToggled","setIsToggled","isDataArray","Array","isArray","Object","keys","map","v","i","a","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAGA,MAAMC,QAAQ,GAAG,CAAC;AAChBC,EAAAA,IADgB;AAEhBC,EAAAA,OAAO,GAAG,IAFM;AAGhBC,EAAAA,IAAI,GAAG,IAHS;AAIhBC,EAAAA,MAAM,GAAG,IAJO;AAKhBC,EAAAA,cAAc,GAAG,KALD;AAMhBC,EAAAA,eAAe,GAAG;AANF,CAAD,KAOX;AAAA;;AACJ,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BX,KAAK,CAACC,QAAN,CAAeI,OAAf,CAAlC;AACA,QAAMO,WAAW,GAAGC,KAAK,CAACC,OAAN,CAAcV,IAAd,CAApB;AAEA,sBACE;AACE,IAAA,SAAS,EAAG,gBAAeK,eAAe,IAAI,WAAY,IAAGD,cAAc,IAAI,UAC5E,EAFL;AAAA,4BAIE;AACE,MAAA,SAAS,EAAEE,SAAS,GAAG,SAAH,GAAe,gBADrC;AAEE,MAAA,OAAO,EAAE,MAAMC,YAAY,CAAC,CAACD,SAAF;AAF7B;AAAA;AAAA;AAAA;AAAA,YAJF,EAQGJ,IAAI,gBAAG;AAAA,6BAAqBA,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,gBAA2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARlD,EASGM,WAAW,GAAG,GAAH,GAAS,GATvB,EAUG,CAACF,SAAD,IAAc,KAVjB,EAWGK,MAAM,CAACC,IAAP,CAAYZ,IAAZ,EAAkBa,GAAlB,CAAsB,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,KACrB,OAAOhB,IAAI,CAACc,CAAD,CAAX,KAAmB,QAAnB,gBACE,QAAC,QAAD;AAEE,MAAA,IAAI,EAAEd,IAAI,CAACc,CAAD,CAFZ;AAGE,MAAA,MAAM,EAAEC,CAAC,KAAKC,CAAC,CAACC,MAAF,GAAW,CAH3B;AAIE,MAAA,IAAI,EAAET,WAAW,GAAG,IAAH,GAAUM,CAJ7B;AAKE,MAAA,cAAc,MALhB;AAME,MAAA,eAAe,EAAET,eAAe,IAAIC;AANtC,OACQ,GAAEJ,IAAK,IAAGY,CAAE,IAAGC,CAAE,EADzB;AAAA;AAAA;AAAA;AAAA,YADF,gBAUE;AAEE,MAAA,SAAS,EAAET,SAAS,GAAG,cAAH,GAAoB,wBAF1C;AAAA,iBAIGE,WAAW,GAAG,EAAH,gBAAQ;AAAA,mBAASM,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA,cAJtB,EAKGd,IAAI,CAACc,CAAD,CALP,EAMGC,CAAC,KAAKC,CAAC,CAACC,MAAF,GAAW,CAAjB,GAAqB,EAArB,GAA0B,GAN7B;AAAA,OACQ,GAAEf,IAAK,IAAGY,CAAE,IAAGC,CAAE,EADzB;AAAA;AAAA;AAAA;AAAA,YAXH,CAXH,EAgCGP,WAAW,GAAG,GAAH,GAAS,GAhCvB,EAiCG,CAACL,MAAD,GAAU,GAAV,GAAgB,EAjCnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqCD,CAhDD;;GAAMJ,Q;;KAAAA,Q;AAkDN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// interface ITreeViewProps {\n//     name: string,\n//     data: []\n// }\n// const TreeView = ({ name, data }: ITreeViewProps): JSX.Element => {\n\n//     const [isToggle, setIsToggled] = useState<boolean>(false);\n\n//     const toggleReport = () => {\n//         setIsToggled(!isToggle)\n//     }\n\n//     return (\n//         <>\n//             <div className=\"App\">\n//                 <ul className=\"tree\">\n//                     <li className=\"tree_li\">\n//                         <input type=\"checkbox\" checked id=\"c1\" />\n//                         <label className=\"tree_label label_dropdwn\" htmlFor=\"c1\"><span>Level 0</span></label>\n//                     </li>\n//                 </ul>\n//             </div>\n//             {/* {isToggle && } */}\n//         </>\n//     )\n// }\n\n// export default TreeView;\n\n\nconst TreeView = ({\n  data,\n  toggled = true,\n  name = null,\n  isLast = true,\n  isChildElement = false,\n  isParentToggled = true\n}) => {\n  const [isToggled, setIsToggled] = React.useState(toggled);\n  const isDataArray = Array.isArray(data);\n\n  return (\n    <div\n      className={`tree-element ${isParentToggled && 'collapsed'} ${isChildElement && 'is-child'\n        }`}\n    >\n      <span\n        className={isToggled ? 'toggler' : 'toggler closed'}\n        onClick={() => setIsToggled(!isToggled)}\n      />\n      {name ? <strong>&nbsp;&nbsp;{name}: </strong> : <span>&nbsp;&nbsp;</span>}\n      {isDataArray ? '[' : '{'}\n      {!isToggled && '...'}\n      {Object.keys(data).map((v, i, a) =>\n        typeof data[v] === 'object' ? (\n          <TreeView\n            key={`${name}-${v}-${i}`}\n            data={data[v]}\n            isLast={i === a.length - 1}\n            name={isDataArray ? null : v}\n            isChildElement\n            isParentToggled={isParentToggled && isToggled}\n          />\n        ) : (\n          <p\n            key={`${name}-${v}-${i}`}\n            className={isToggled ? 'tree-element' : 'tree-element collapsed'}\n          >\n            {isDataArray ? '' : <strong>{v}: </strong>}\n            {data[v]}\n            {i === a.length - 1 ? '' : ','}\n          </p>\n        )\n      )}\n      {isDataArray ? ']' : '}'}\n      {!isLast ? ',' : ''}\n    </div>\n  );\n};\n\nexport default TreeView;"]},"metadata":{},"sourceType":"module"}