{"ast":null,"code":"var _jsxFileName = \"/home/wappnet-17/workspace/navigation_treetask/navigation_tree/src/TreeView.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TreeView = ({\n  name,\n  data\n}) => {\n  _s();\n\n  const [isToggle, setIsToggled] = useState(false);\n\n  const toggleReport = () => {\n    setIsToggled(!isToggle);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"tree\",\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"tree_li\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: true,\n            onChange: () => toggleReport,\n            id: \"c1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"tree_label label_dropdwn\",\n            htmlFor: \"c1\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 82\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), isToggle && data.map((node, key) => /*#__PURE__*/_jsxDEV(TreeView, {\n      name: node.name,\n      data: node.data\n    }, `node_${key}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true);\n};\n\n_s(TreeView, \"f2eT/GU3n2Sz1xjy1irFn8w6Gf4=\");\n\n_c = TreeView;\nexport default TreeView;\n\nvar _c;\n\n$RefreshReg$(_c, \"TreeView\");","map":{"version":3,"sources":["/home/wappnet-17/workspace/navigation_treetask/navigation_tree/src/TreeView.tsx"],"names":["React","useState","TreeView","name","data","isToggle","setIsToggled","toggleReport","map","node","key"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA2C,OAA3C;;;;AAMA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAiD;AAAA;;AAE9D,QAAM,CAACC,QAAD,EAAWC,YAAX,IAA2BL,QAAQ,CAAU,KAAV,CAAzC;;AAEA,QAAMM,YAAY,GAAG,MAAM;AACvBD,IAAAA,YAAY,CAAC,CAACD,QAAF,CAAZ;AACH,GAFD;;AAIA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACI;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA,+BACI;AAAI,UAAA,SAAS,EAAC,SAAd;AAAA,kCACI;AAAO,YAAA,IAAI,EAAC,UAAZ;AAAuB,YAAA,OAAO,MAA9B;AAA+B,YAAA,QAAQ,EAAE,MAAME,YAA/C;AAA6D,YAAA,EAAE,EAAC;AAAhE;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAO,YAAA,SAAS,EAAC,0BAAjB;AAA4C,YAAA,OAAO,EAAC,IAApD;AAAA,mCAAyD;AAAA,wBAAOJ;AAAP;AAAA;AAAA;AAAA;AAAA;AAAzD;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,EASKE,QAAQ,IACLD,IAAI,CAACI,GAAL,CAAS,CAACC,IAAD,EAAUC,GAAV,kBACL,QAAC,QAAD;AAA8B,MAAA,IAAI,EAAED,IAAI,CAACN,IAAzC;AAA+C,MAAA,IAAI,EAAEM,IAAI,CAACL;AAA1D,OAAgB,QAAOM,GAAI,EAA3B;AAAA;AAAA;AAAA;AAAA,YADJ,CAVR;AAAA,kBADJ;AAiBH,CAzBD;;GAAMR,Q;;KAAAA,Q;AA2BN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\ninterface ITreeViewProps {\n    name: string,\n    data: any\n}\nconst TreeView = ({ name, data }: ITreeViewProps): JSX.Element => {\n\n    const [isToggle, setIsToggled] = useState<boolean>(false);\n\n    const toggleReport = () => {\n        setIsToggled(!isToggle)\n    }\n\n    return (\n        <>\n            <div className=\"App\">\n                <ul className=\"tree\">\n                    <li className=\"tree_li\">\n                        <input type=\"checkbox\" checked onChange={() => toggleReport} id=\"c1\" />\n                        <label className=\"tree_label label_dropdwn\" htmlFor=\"c1\"><span>{name}</span></label>\n                    </li>\n                </ul>\n            </div>\n            {isToggle && (\n                data.map((node:any,key:number) => (\n                    <TreeView key={`node_${key}`} name={node.name} data={node.data}/>\n                ))\n            )}\n        </>\n    )\n}\n\nexport default TreeView;\n\n"]},"metadata":{},"sourceType":"module"}