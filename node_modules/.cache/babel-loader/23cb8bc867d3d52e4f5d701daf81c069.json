{"ast":null,"code":"var _jsxFileName = \"/home/wappnet-17/workspace/navigation_treetask/navigation_tree/src/TreeView.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // interface ITreeViewProps {\n//     name: string,\n//     data: []\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TreeView = ({\n  index,\n  name,\n  data\n}) => {\n  _s();\n\n  const [isToggle, setIsToggled] = useState(false);\n\n  const toggleReport = () => {\n    setIsToggled(!isToggle);\n  };\n\n  console.log({\n    data\n  }, now());\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: index == 0 && 'tree',\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        className: index == 0 && 'tree_li',\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isToggle,\n          onChange: toggleReport,\n          id: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"tree_label label_dropdwn\",\n          htmlFor: name,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 84\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 25\n        }, this), isToggle && data.map((node, key) => /*#__PURE__*/_jsxDEV(TreeView, {\n          index: key + 1,\n          name: node.name,\n          data: node.data\n        }, `node_${key}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 33\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(TreeView, \"f2eT/GU3n2Sz1xjy1irFn8w6Gf4=\");\n\n_c = TreeView;\nexport default TreeView;\n\nvar _c;\n\n$RefreshReg$(_c, \"TreeView\");","map":{"version":3,"sources":["/home/wappnet-17/workspace/navigation_treetask/navigation_tree/src/TreeView.jsx"],"names":["React","useState","useEffect","TreeView","index","name","data","isToggle","setIsToggled","toggleReport","console","log","now","map","node","key"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;AACA;AACA;AACA;;;;;AACA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,IAAT;AAAeC,EAAAA;AAAf,CAAD,KAA2B;AAAA;;AAExC,QAAM,CAACC,QAAD,EAAWC,YAAX,IAA2BP,QAAQ,CAAC,KAAD,CAAzC;;AAEA,QAAMQ,YAAY,GAAG,MAAM;AACvBD,IAAAA,YAAY,CAAC,CAACD,QAAF,CAAZ;AACH,GAFD;;AAGJG,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACL,IAAAA;AAAD,GAAZ,EAAmBM,GAAG,EAAtB;AACI,sBACI;AAAA,2BAEQ;AAAI,MAAA,SAAS,EAAER,KAAK,IAAI,CAAT,IAAc,MAA7B;AAAA,6BACI;AAAI,QAAA,SAAS,EAAEA,KAAK,IAAI,CAAT,IAAc,SAA7B;AAAA,gCACI;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,OAAO,EAAEG,QAAhC;AAA0C,UAAA,QAAQ,EAAEE,YAApD;AAAkE,UAAA,EAAE,EAAEJ;AAAtE;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAO,UAAA,SAAS,EAAC,0BAAjB;AAA4C,UAAA,OAAO,EAAEA,IAArD;AAAA,iCAA2D;AAAA,sBAAOA;AAAP;AAAA;AAAA;AAAA;AAAA;AAA3D;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAGKE,QAAQ,IACLD,IAAI,CAACO,GAAL,CAAS,CAACC,IAAD,EAAOC,GAAP,kBACL,QAAC,QAAD;AAA8B,UAAA,KAAK,EAAEA,GAAG,GAAC,CAAzC;AAA4C,UAAA,IAAI,EAAED,IAAI,CAACT,IAAvD;AAA6D,UAAA,IAAI,EAAES,IAAI,CAACR;AAAxE,WAAgB,QAAOS,GAAI,EAA3B;AAAA;AAAA;AAAA;AAAA,gBADJ,CAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAFR,mBADJ;AAiBH,CAzBD;;GAAMZ,Q;;KAAAA,Q;AA2BN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// interface ITreeViewProps {\n//     name: string,\n//     data: []\n// }\nconst TreeView = ({ index, name, data }) => {\n\n    const [isToggle, setIsToggled] = useState(false);\n\n    const toggleReport = () => {\n        setIsToggled(!isToggle)\n    }\nconsole.log({data},now());\n    return (\n        <>\n            {/* <div className=\"App\"> */}\n                <ul className={index == 0 && 'tree'}>\n                    <li className={index == 0 && 'tree_li'}>\n                        <input type=\"checkbox\" checked={isToggle} onChange={toggleReport} id={name} />\n                        <label className=\"tree_label label_dropdwn\" htmlFor={name}><span>{name}</span></label>\n                        {isToggle && (\n                            data.map((node, key) => (\n                                <TreeView key={`node_${key}`} index={key+1} name={node.name} data={node.data} />\n                            ))\n                        )}\n                    </li>\n                </ul>\n            {/* </div> */}\n        </>\n    )\n}\n\nexport default TreeView;\n\n"]},"metadata":{},"sourceType":"module"}