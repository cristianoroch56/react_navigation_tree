{"ast":null,"code":"var _jsxFileName = \"/home/wappnet-17/workspace/navigation_treetask/navigation_tree/src/TreeView.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport reportIcon from './reportIcon.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TreeView = ({\n  index,\n  name,\n  data\n}) => {\n  _s();\n\n  const [isToggle, setIsToggled] = useState(false);\n\n  const toggleReport = () => {\n    setIsToggled(!isToggle);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: index == 0 ? 'tree' : '',\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        className: index == 0 ? 'tree_li' : '',\n        children: [data && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isToggle,\n          onChange: toggleReport,\n          id: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 30\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: data ? \"tree_label\" : \"child_label tree_label\",\n          htmlFor: name,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: data ? \"label_dropdwn\" : \"\",\n            children: [\" \", index === 0 && /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"report-icon\",\n              src: reportIcon,\n              alt: \"root\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 165\n            }, this), \"  \", name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 102\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, this), isToggle && data && data.map((node, key) => /*#__PURE__*/_jsxDEV(TreeView, {\n          index: key + 1,\n          name: node.name,\n          data: node === null || node === void 0 ? void 0 : node.data\n        }, `node_${key}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(TreeView, \"f2eT/GU3n2Sz1xjy1irFn8w6Gf4=\");\n\n_c = TreeView;\nexport default TreeView;\n\nvar _c;\n\n$RefreshReg$(_c, \"TreeView\");","map":{"version":3,"sources":["/home/wappnet-17/workspace/navigation_treetask/navigation_tree/src/TreeView.tsx"],"names":["React","useState","reportIcon","TreeView","index","name","data","isToggle","setIsToggled","toggleReport","map","node","key"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAwB,kBAAxB;;;;AAQA,MAAMC,QAAkC,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,IAAT;AAAeC,EAAAA;AAAf,CAAD,KAA2B;AAAA;;AAElE,QAAM,CAACC,QAAD,EAAWC,YAAX,IAA2BP,QAAQ,CAAC,KAAD,CAAzC;;AAEA,QAAMQ,YAAY,GAAG,MAAY;AAC7BD,IAAAA,YAAY,CAAC,CAACD,QAAF,CAAZ;AACH,GAFD;;AAIA,sBACI;AAAA,2BAEI;AAAI,MAAA,SAAS,EAAEH,KAAK,IAAI,CAAT,GAAa,MAAb,GAAsB,EAArC;AAAA,6BACI;AAAI,QAAA,SAAS,EAAEA,KAAK,IAAI,CAAT,GAAa,SAAb,GAAyB,EAAxC;AAAA,mBACKE,IAAI,iBAAI;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,OAAO,EAAEC,QAAhC;AAA0C,UAAA,QAAQ,EAAEE,YAApD;AAAkE,UAAA,EAAE,EAAEJ;AAAtE;AAAA;AAAA;AAAA;AAAA,gBADb,eAEI;AAAO,UAAA,SAAS,EAAEC,IAAI,GAAG,YAAH,GAAkB,wBAAxC;AAAkE,UAAA,OAAO,EAAED,IAA3E;AAAA,iCAAiF;AAAM,YAAA,SAAS,EAAEC,IAAI,GAAG,eAAH,GAAqB,EAA1C;AAAA,4BAAgDF,KAAK,KAAK,CAAV,iBAAe;AAAK,cAAA,SAAS,EAAC,aAAf;AAA6B,cAAA,GAAG,EAAEF,UAAlC;AAA8C,cAAA,GAAG,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,oBAA/D,QAA6HG,IAA7H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAjF;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAGKE,QAAQ,IACLD,IAAI,IAAIA,IAAI,CAACI,GAAL,CAAS,CAACC,IAAD,EAAWC,GAAX,kBACb,QAAC,QAAD;AAA8B,UAAA,KAAK,EAAEA,GAAG,GAAG,CAA3C;AAA8C,UAAA,IAAI,EAAED,IAAI,CAACN,IAAzD;AAA+D,UAAA,IAAI,EAAEM,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEL;AAA3E,WAAgB,QAAOM,GAAI,EAA3B;AAAA;AAAA;AAAA;AAAA,gBADI,CAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAFJ,mBADJ;AAiBH,CAzBD;;GAAMT,Q;;KAAAA,Q;AA2BN,eAAeA,QAAf","sourcesContent":["import React, { useState } from 'react';\nimport reportIcon  from './reportIcon.png';\n\ninterface ITreeViewProps {\n    index: number,\n    name: string,\n    data: any\n}\n\nconst TreeView: React.FC<ITreeViewProps> = ({ index, name, data }) => {\n\n    const [isToggle, setIsToggled] = useState(false);\n\n    const toggleReport = (): void => {\n        setIsToggled(!isToggle)\n    }\n\n    return (\n        <>\n\n            <ul className={index == 0 ? 'tree' : ''}>\n                <li className={index == 0 ? 'tree_li' : ''}>\n                    {data && <input type=\"checkbox\" checked={isToggle} onChange={toggleReport} id={name} />}\n                    <label className={data ? \"tree_label\" : \"child_label tree_label\"} htmlFor={name}><span className={data ? \"label_dropdwn\" : \"\"}> {index === 0 && <img className=\"report-icon\" src={reportIcon} alt=\"root\"/>}  {name}</span></label>\n                    {isToggle && (\n                        data && data.map((node:any, key:number) => (\n                            <TreeView key={`node_${key}`} index={key + 1} name={node.name} data={node?.data} />\n                        ))\n                    )}\n                </li>\n            </ul>\n\n        </>\n    )\n}\n\nexport default TreeView;\n\n\n"]},"metadata":{},"sourceType":"module"}